Tokens:
[@0,23:26='func',<15>,2:0]
[@1,28:30='int',<12>,2:5]
[@2,32:34='foo',<24>,2:9]
[@3,35:35='(',<6>,2:12]
[@4,36:38='int',<12>,2:13]
[@5,40:40='a',<24>,2:17]
[@6,41:41=',',<3>,2:18]
[@7,43:46='char',<13>,2:20]
[@8,48:48='b',<24>,2:25]
[@9,49:49=')',<7>,2:26]
[@10,51:51='{',<8>,2:28]
[@11,84:84='a',<24>,4:4]
[@12,86:86='=',<5>,4:6]
[@13,88:88='1',<21>,4:8]
[@14,89:89=';',<2>,4:9]
[@15,95:95='b',<24>,5:4]
[@16,97:97='=',<5>,5:6]
[@17,99:101=''2'',<21>,5:8]
[@18,102:102=';',<2>,5:11]
[@19,126:126='a',<24>,8:4]
[@20,128:128='=',<5>,8:6]
[@21,130:130='a',<24>,8:8]
[@22,132:132='-',<25>,8:10]
[@23,134:134='a',<24>,8:12]
[@24,135:135=';',<2>,8:13]
[@25,170:171='if',<10>,11:4]
[@26,173:173='(',<6>,11:7]
[@27,174:174='a',<24>,11:8]
[@28,176:177='==',<25>,11:10]
[@29,179:179='0',<21>,11:13]
[@30,180:180=')',<7>,11:14]
[@31,182:182='{',<8>,11:16]
[@32,192:192='a',<24>,12:8]
[@33,194:194='=',<5>,12:10]
[@34,196:196='a',<24>,12:12]
[@35,198:198='+',<25>,12:14]
[@36,200:200='1',<21>,12:16]
[@37,201:201=';',<2>,12:17]
[@38,207:207='}',<9>,13:4]
[@39,235:239='while',<11>,16:4]
[@40,241:241='(',<6>,16:10]
[@41,242:242='a',<24>,16:11]
[@42,244:244='>',<25>,16:13]
[@43,246:246='0',<21>,16:15]
[@44,247:247=')',<7>,16:16]
[@45,249:249='{',<8>,16:18]
[@46,259:259='a',<24>,17:8]
[@47,261:261='=',<5>,17:10]
[@48,263:263='a',<24>,17:12]
[@49,265:265='-',<25>,17:14]
[@50,267:267='1',<21>,17:16]
[@51,268:268=';',<2>,17:17]
[@52,274:274='}',<9>,18:4]
[@53,337:339='int',<12>,21:4]
[@54,341:341='c',<24>,21:8]
[@55,343:343='=',<5>,21:10]
[@56,345:345='3',<21>,21:12]
[@57,346:346=';',<2>,21:13]
[@58,352:355='char',<13>,22:4]
[@59,357:357='d',<24>,22:9]
[@60,359:359='=',<5>,22:11]
[@61,361:363=''4'',<21>,22:13]
[@62,364:364=';',<2>,22:16]
[@63,371:376='return',<16>,24:4]
[@64,378:378='0',<21>,24:11]
[@65,379:379=';',<2>,24:12]
[@66,381:381='}',<9>,25:0]
[@67,408:411='func',<15>,28:0]
[@68,413:416='void',<14>,28:5]
[@69,418:420='bar',<24>,28:10]
[@70,421:421='(',<6>,28:13]
[@71,422:424='int',<12>,28:14]
[@72,426:426='c',<24>,28:18]
[@73,427:427=')',<7>,28:19]
[@74,429:429='{',<8>,28:21]
[@75,435:435='c',<24>,29:4]
[@76,437:437='=',<5>,29:6]
[@77,439:439='c',<24>,29:8]
[@78,441:441='*',<25>,29:10]
[@79,443:443='c',<24>,29:12]
[@80,444:444=';',<2>,29:13]
[@81,446:446='}',<9>,30:0]
[@82,465:467='foo',<24>,33:0]
[@83,468:468='(',<6>,33:3]
[@84,469:469='1',<21>,33:4]
[@85,470:470=',',<3>,33:5]
[@86,472:474=''2'',<21>,33:7]
[@87,475:475=')',<7>,33:10]
[@88,476:476=';',<2>,33:11]
[@89,496:498='bar',<24>,36:0]
[@90,499:499='(',<6>,36:3]
[@91,500:500='3',<21>,36:4]
[@92,501:501=')',<7>,36:5]
[@93,502:502=';',<2>,36:6]
[@94,504:503='<EOF>',<-1>,37:0]


Parse Tree (Lisp Format):
(program (statement (func_declaration (func_specifiers func) (type_specifier (primitive_types int)) foo ( (func_parm_declaration_list (func_parm_declaration (type_specifier (primitive_types int)) a) , (func_parm_declaration_list (func_parm_declaration (type_specifier (primitive_types char)) b))) ) (block_statement { (statement_list (statement (assignment a = (expression 1) ;)) (statement (assignment b = (expression '2') ;)) (statement (assignment a = (expression (expression a) - (expression a)) ;)) (statement (condition_statments (if_statement if ( (expression (expression a) == (expression 0)) ) (block_statement { (statement_list (statement (assignment a = (expression (expression a) + (expression 1)) ;))) })))) (statement (loop_statements (while_statement while ( (expression (expression a) > (expression 0)) ) (block_statement { (statement_list (statement (assignment a = (expression (expression a) - (expression 1)) ;))) })))) (statement (declaration (type_specifier (primitive_types int)) (assignment c = (expression 3) ;))) (statement (declaration (type_specifier (primitive_types char)) (assignment d = (expression '4') ;))) (statement (return_statement return (expression 0) ;))) }))) (statement (func_declaration (func_specifiers func) (type_specifier void) bar ( (func_parm_declaration_list (func_parm_declaration (type_specifier (primitive_types int)) c)) ) (block_statement { (statement_list (statement (assignment c = (expression (expression c) * (expression c)) ;))) }))) (statement (func_call foo ( (func_param_call_list (func_param_call (expression 1)) , (func_param_call_list (func_param_call (expression '2')))) ))))
